
// //     const {
// turn,
//     setTurn,
//     board,
//     setBoard,
//     gameOver,
//     setGameOver,
//     singlePlayer,
//     winningCells,
//     setWinningCells
//     } = useContext(AppContext);



    // 

    // C:\Users\Big Chamel\Desktop\Web Dev Practice\chess\public\icons

    // function selectPiece(piece) {
    //     if (piece.target.getAttribute("src") != "/icons/.png") {
    //         setSelectedPiece(piece.target.alt);
    //     }
    //     // console.log(selectedPiece)
    // }

    // function selectCell(piece) {
    //     // console.log(selectedPiece)
    //     if (piece.target.localName != "img") {
    //         if (piece.target.firstChild.getAttribute("src") == "/icons/.png") {
    //             setSelectedCell(piece.target.id);
    //             movePiece(piece.target.id);
    //         }
    //     }
    // }

    // function movePiece(id) {
    //     var cell = document.getElementById(id);
    //     if (selectedPiece) {
    //         // console.log(cell.firstChild.setAttribute("src", selectPiece))
    //     }
    // }









/BOARD.JSX

        // const [selectedCell, setSelectedCell] = useState(null);
    // const [selectedPiece, setSelectedPiece] = useState(null);
    // const [selectedPieceSrc, setSelectedPieceSrc] = useState(null);
    // const [validMoves, setValidMoves] = useState([])

    // var moves = [];
    // function setMoves(piece){
    //     if (selectedPiece === 'wp'){
    //         var cell = piece.target.id;
    //         var row = Number(cell.slice(1));
    //         var letter = cell.slice(0,1);
    //         for (var i = row; i < row+2 ; i++){
    //             var move = letter+(i+1);
    //             moves.push(move);
    //         }
    //         setValidMoves(moves)
    //         for (move in moves){
    //             document.getElementById(moves[move]).classList.add('moves')
    //         }
    //     }
    // }

    // function handleClick(e) {
    //     if (e.target.localName === 'div') {
    //         setSelectedCell(e.target.id)
    //         if (selectedPiece) {
    //             movePiece(e.target.id)
    //         }
    //     }
    //     else if (e.target.localName === 'img') {
    //         setSelectedPiece(e.target.getAttribute('value'));
    //         setSelectedPieceSrc(e.target.getAttribute('src'));
    //         console.log(moves)
    //         moves.forEach(move => {
    //             document.getElementById(moves[move]).classList.remove('moves')
    //         });
    //         setMoves(e)
    //     }
    // }

    // function movePiece(cell) {
    //     document.getElementById(cell).firstChild.setAttribute('src', selectedPieceSrc);
    // }



    // BOARDCELL.JSX
    // const whitePieces = ['wp', 'wr', 'wn', 'wb', 'wq', 'wk']
    // const blackPieces = ['bp', 'br', 'bn', 'bb', 'bq', 'bk']

       // // Setting the chess pieces
    // for (var i = 0; i < 8; i++) {
    //     if (props.number == 2) {
    //         piece = whitePieces[0];
    //     } else if (props.number == 7) {
    //         piece = blackPieces[0];
    //     }
    //     else if (props.number == 1) {
    //         if (props.index == 1 || props.index == 8) {
    //             piece = whitePieces[1];
    //         } else if (props.index == 2 || props.index == 7) {
    //             piece = whitePieces[2];
    //         } else if (props.index == 3 || props.index == 6) {
    //             piece = whitePieces[3];
    //         } else if (props.index == 4) {
    //             piece = whitePieces[4];
    //         } else if (props.index == 5) {
    //             piece = whitePieces[5];
    //         }
    //     } else if (props.number == 8) {
    //         if (props.index == 1 || props.index == 8) {
    //             piece = blackPieces[1];
    //         } else if (props.index == 2 || props.index == 7) {
    //             piece = blackPieces[2];
    //         } else if (props.index == 3 || props.index == 6) {
    //             piece = blackPieces[3];
    //         } else if (props.index == 4) {
    //             piece = blackPieces[5];
    //         } else if (props.index == 5) {
    //             piece = blackPieces[4];
    //         }
    //     }
    // }
